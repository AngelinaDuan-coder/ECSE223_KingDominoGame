namespace ca.mcgill.ecse223.kingdomino.model;

class Gameplay {

	
	depend ca.mcgill.ecse223.kingdomino.controller.*;
	depend java.util.*;
	depend ca.mcgill.ecse223.kingdomino.KingdominoApplication;
	depend ca.mcgill.ecse223.kingdomino.model.*;
	depend ca.mcgill.ecse223.kingdomino.model.DominoInKingdom.*;
	depend ca.mcgill.ecse223.kingdomino.model.Domino.*;
	depend ca.mcgill.ecse223.kingdomino.view.Game_4_Players;

	depend ca.mcgill.ecse223.kingdomino.KingdominoApplication;
	depend java.io.IOException;


    Game game = KingdominoApplication.getKingdomino().getCurrentGame();
   	int selectingOrder = 0;
   	int placingOrder = 0;
   	int total_No_Draft =0;
   	
    
    //selecingOrder is only for selecingFirstDraft by using game.getCurrentOrder(SelecingOrder)
    //placingOrder is for all the player order afterwards
    
    
    /*
     *@author chenkua
     */
    
    //basic logic
    
    // creatingFirstDraft ->SelectingFirstDraft -> CreatingNextDraft -> PlacingFirstDraft && SelecingSecondDraft
    //->CreatingThirdDraft ->PlacingThirdDraft && SelecingForthDraft ->.....
    //Placing#11Draft && Selecing#12Draft -> Placing#12dDraft -> Evalution
     
       
    

    gamestatus {
        Initializing{
      
            CreatingFirstDrafts{      
                entry/{shuffleDominoPile(); try{
                    createAndSortFirstDraft();
                }catch (InvalidInputException e) {
  					e.printStackTrace();
  				throw new java.lang.IllegalArgumentException(
  					"Error occured while trying to create draft: " + e.getMessage());
                } 
                }    //No. draft =1
                
                
                draftsReady -> /{
                	try{
                    revealFirstDraft();
                 	 }catch (InvalidInputException e) {
  					e.printStackTrace();
  					throw new java.lang.IllegalArgumentException(
  					"Error occured while trying to revealing draft: " + e.getMessage()); }				
  					
                	generateInitialPlayerOrder();} Initializing.SelectingFirstDomino;	
                
                //by revealNextDraft it will setCurretndraft(nextDraft);
                
                
            }
            
            SelectingFirstDomino{
                
                //we should select domino first rather than directly place
                //after selecting first draft, second draft appear
	            //Then players have selected second draft, they can place the domino in first draft

                selectingFirstDraftDomino(int domino) [DominoSelectable(domino)&& selectingOrder<3]->/{
	              		selectingFirst(domino);
	   			    	setPlayerOrderNextDraft(domino);
	                	selectingOrder = (selectingOrder+1)%4;
                	} Initializing.SelectingFirstDomino;
                
                selectingFirstDraftDomino(int domino) [DominoSelectable(domino) && selectingOrder>=3] ->/{              
	              		selectingFirst(domino);	                     	
                		setPlayerOrderNextDraft(domino);
                		selectingOrder = (selectingOrder+1)%4; 
                		upDatePlayerOrder();               		
                	} CreatingNextDraft;

            }
      
        }
    
        ProceedingToNextTurn{
        
		 	CreatingNextDraft{				
              	 	hasMoreDraft [total_No_Draft<12] ->/{
              	 		System.out.println("hasMoreDraft");
              	 
              	 		
              	 		try{
                	    	createNextDraft();
                		}catch (InvalidInputException e) {
  							e.printStackTrace();
  							throw new java.lang.IllegalArgumentException(
  							"Error occured while trying to create draft: " + e.getMessage()); }  
               		 
               		 	try{
                  	 		orderNextDraft();
                        } catch (InvalidInputException e) {
    				    	e.printStackTrace();
    						throw new java.lang.IllegalArgumentException(
    						"Error occured while trying to sort draft: " + e.getMessage()); }
    					try{
                  	    	revealNextDraft();
                 	    }catch (InvalidInputException e) {
  					    	e.printStackTrace();
  					    	throw new java.lang.IllegalArgumentException(
  					    	"Error occured while trying to revealing draft: " + e.getMessage());}	
    					
  					} proceedingToPlaceDomino; 
  					
  					hasMoreDraft [total_No_Draft>=12] ->  proceedingToPlaceDomino;            
            }
            
            proceedingToPlaceDomino{
       
       		//Player need to place their domino first and then select the domino in next draft
       		//If Player is the last one in the Ordering i.e placingOrdering = 3; this turn has end.
       		//
             
                placingDomino{
                		 	   	 	   
                	   moveDominoToKingdom(int x, int y, String dir) ->/	{ createDominoInKingdom(x,y, dir); } placingDomino;          	    	   
                	  
                	   moveCurrentDomino(DirectionKind move) [moveable()]->/{moveDominoInKingdom(move); } placingDomino;			// same placingOrder, so the same player 
                  	
                  	   rotateCurrentDomino(String rotation) ->/{ rotate(rotation); } placingDomino;			// same placingOrder, so the same player 
   
                	   discard() [!shouldDiscardDomino()] ->/{System.out.println(placingOrder); WarningInDiscarding();} placingDomino;

                	   discard() [ shouldDiscardDomino() && (total_No_Draft<12)] ->/ {
                	   		} choosingNextDomino;       //placingOrder=(placingOrder+1)%4;         	   
                	   				
                	   discard() [shouldDiscardDomino() && (total_No_Draft>=12) && (placingOrder<3)]/{ 
                				   
                				    } -> placingDomino; 		// placingOrder is increased by 1, so it is next player no need to select
                				    //placingOrder=(placingOrder+1)%4;
                				    
                  	   discard() [ shouldDiscardDomino() && (total_No_Draft>=12) && placingOrder>=3] -> /{
                  		   System.out.println(placingOrder);} Evaluation;
                  	   
                  	   
                	              		
                	   confirmPlacement()[!preplaceDomino()] ->/{choose_Other_Placement();} placingDomino;	// no change in ordering, same player
                	   
                  	   confirmPlacement()[preplaceDomino() && (total_No_Draft<12)] ->/{verifyPlacement();placingOrder=(placingOrder+1)%4;} choosingNextDomino;
                	   
                	   confirmPlacement()[preplaceDomino() && (total_No_Draft>=12) && (placingOrder<3)]/ 
                	   {verifyPlacement();placingOrder=(placingOrder+1)%4;} -> placingDomino;				//chanege in ordering, next player
                	                   	   
                	   confirmPlacement()[preplaceDomino()&&(total_No_Draft>=12) && (placingOrder>=3)]-> Evaluation;
                	   
                    
                }
                
                choosingNextDomino{       
                
                    selectingDomino(int domino)[selectingOrder<3]/ {
                    selectingNext(domino);
                    setPlayerOrderNextDraft(domino);
                    selectingOrder = (selectingOrder+1)%4;                  
                    	} -> placingDomino;    
                          
                    selectingDomino(int domino)[selectingOrder>=3] ->/{
                    selectingNext(domino);                                                     
                    setPlayerOrderNextDraft(domino);
                    selectingOrder = (selectingOrder+1)%4;
                    upDatePlayerOrder();
                    updateTwoDraftPostion();			
                    	} ProceedingToNextTurn;
                   
                   // Game have two List<Player>. One is the ordering of current draft and second is the ordering of next draft
                    

                }
            
            }
            
        
      
        }

    
        Evaluation{
            CalculatingPlayersScore{
                entry/{calculateAllPlayersScores();}
                
                scoresAreCalculated[!isThereATie()] -> Evaluation.CalculatingRanking;
                
                scoresAreCalculated[isThereATie()] -> Evaluation.ResolvingTieBreak;
            }
            
            ResolvingTieBreak{
                entry/{resolveTieBreak();}
                
            }
            
            CalculatingRanking{
                
            }
            
      
            
        }
   	
   
    }





/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Actions and Guards below/////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
	/**
	 *@author chenkua
	 *
	 */
    /*
     * Setter for test setup
     */
    public void setGamestatus (String status){
                 
        switch (status) {
       	case "CreatingFirstDrafts":
       	    gamestatus = Gamestatus.Initializing;
       	    gamestatusInitializing = GamestatusInitializing.CreatingFirstDrafts;
       	    break;
       	case"ProceedingToNextTurn":
       		gamestatus = Gamestatus.ProceedingToNextTurn;
       		gamestatusProceedingToNextTurn= GamestatusProceedingToNextTurn.CreatingNextDraft;
       		break;
       		
       	case"Evaluation": 
       		gamestatus = Gamestatus.Evaluation;
       		gamestatusEvaluation = GamestatusEvaluation.CalculatingPlayersScore;
       	    break;
       	default:
       	    throw new RuntimeException("Invalid gamestatus string was provided: " + status);
       	}
    }
    
  	public void setProceedingToNextTurn(String status){
  		 switch (status) {
  		 case"CreatingNextDraft":
  		 	 gamestatus = Gamestatus.ProceedingToNextTurn;
  		 	 gamestatusProceedingToNextTurn = GamestatusProceedingToNextTurn.CreatingNextDraft;		 
  	 		break;
  		 case"proceedingToPlaceDomino":
  			 gamestatus = Gamestatus.ProceedingToNextTurn;
  			 gamestatusProceedingToNextTurn = GamestatusProceedingToNextTurn.proceedingToPlaceDomino;
  			 gamestatusProceedingToNextTurnProceedingToPlaceDomino = GamestatusProceedingToNextTurnProceedingToPlaceDomino.placingDomino;	
  		 	break;		 
  		 
  		 default:
       	    throw new RuntimeException("Invalid gamestatus string was provided: " + status);
  		 }
  	}   
   
   	public void setproceedingToPlaceDomino(String status){
  		 switch (status) {
  		 case"placingDomino":
  		 	 gamestatus = Gamestatus.ProceedingToNextTurn;
  		 	 gamestatusProceedingToNextTurn = GamestatusProceedingToNextTurn.proceedingToPlaceDomino;
  		 	 gamestatusProceedingToNextTurnProceedingToPlaceDomino	=  GamestatusProceedingToNextTurnProceedingToPlaceDomino.placingDomino;
  	 		break;
  		 case"choosingNextDomino":
  			 gamestatus = Gamestatus.ProceedingToNextTurn;
  			 gamestatusProceedingToNextTurn = GamestatusProceedingToNextTurn.proceedingToPlaceDomino;	
  		 	 gamestatusProceedingToNextTurnProceedingToPlaceDomino = GamestatusProceedingToNextTurnProceedingToPlaceDomino.choosingNextDomino;
  		 	break;		 
  		 
  		 default:
       	    throw new RuntimeException("Invalid gamestatus string was provided: " + status);
  		 }

  	}   
   
    
    
    /**This will clear the draft column 2 and update column 1.
   * @author chenkua
   */
  // line 302 "../../../../../Gameplay.ump"
   public void updateTwoDraftPostion(){
    Game_4_Players.refreshSelectioBeforeColumn1();
	Game_4_Players.RefreshDrafts_1();
	Game_4_Players.clearColumn_2();
	
  }
  
    /*
   	 *@author Angelina
     */
  
    public void selectingFirst(int domino){
     try {
     chooseNextDomino(game.getCurrentOrder(selectingOrder), domino);
	} catch (InvalidInputException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    for (DominoSelection s : game.getCurrentDraft().getSelections()) {
			System.out.print(s.getDomino().getId()+" ");
		}
    	System.out.println(" ");
    	System.out.println("Domino is chosen");
   
    }
    
    
    public void selectingNext(int domino){
     try {
		chooseNextDomino(game.getCurrentOrder(selectingOrder), domino);
	} catch (InvalidInputException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    for (DominoSelection s : game.getNextDraft().getSelections()) {
			System.out.print(s.getDomino().getId()+" ");
		}
    	System.out.println(" ");
    	System.out.println("Domino is chosen");
   
    }
    
    // You may need to add more guards here

    /**
    *@author chenkua
    */

    public boolean isThereATie(){
   		boolean has =KingDominoController.HasTieBreak(game);
   		System.out.println("hasTie"+ has);
	  return has;
  }
        
    /*
     * Actions
     */
    
    /**
    * @author: Amani
    */

     public void shuffleDominoPile(){
 
    	KingDominoController.shuffleDominos(this.game);
    	game.setTopDominoInPile(game.getAllDomino(0));
    	for(Domino d: game.getAllDominos()) {
    		System.out.print(d.getId()+"  ");
    	}
    	System.out.println(" ");
    	System.out.println("Domino is shuffled");
  }
    
    /**
   * 
   * @author: chenkua
   */
  // line 199 "../../../../../Gameplay.ump"
  public void generateInitialPlayerOrder(){ 	
  	System.out.println("Player order originally");
  	for(Player p:game.getPlayers()){
  		System.out.print(p.getColor().toString()+" ");
  	}
  	System.out.println(" ");
    List<Player> tmp = game.getPlayers();
    List<String> playercolor = new ArrayList<>();
    
       for(Player a : tmp) {
    	   playercolor.add(a.getColor().toString().toLowerCase());
    	   
       }
       Collections.shuffle(playercolor);
       
      List<Player> players = new ArrayList<>();  
      for(String a:playercolor) {
    	  players.add(getPlayerFromColor(a));
      } 
      
       
       game.setCurrentOrder(players);
       game.setNextOrder(players);
       
       for(Player p:game.getCurrentOrder()){
      		System.out.print(p.getColor().toString()+" ");
      	}
		System.out.println("   generateInitialPlayerOrder");
  }

	 /**
     *@author Ellina
     *
     */
	public void createNextDraft() throws InvalidInputException{
  	  	total_No_Draft = total_No_Draft+1;
 	   	if(game.getNextDraft()!=null) game.setNextDraft(null);   	
		KingDominoController.createNextDraft(game);
		System.out.println("CreateNextDraft" + total_No_Draft);
  }


    /**
     *@author Ellina
     *
     */
    public void orderNextDraft() throws InvalidInputException {
       Game game = KingdominoApplication.getKingdomino().getCurrentGame();
       KingDominoController.sortNextDraft(game); 
       System.out.println("OrderNextDraft");  
        
    }
    

    /** After reveal the next draft, the next draft become the current draft
     *@author Ellina
     *
     */
    public void revealNextDraft() throws InvalidInputException {
       	Game game = KingdominoApplication.getKingdomino().getCurrentGame();
        KingDominoController.revealNextDraft(game);
        System.out.println("revealNextDraft");
        
    }
    
    /**
     *@author Ellina
     *
     */
    public void createAndSortFirstDraft() throws InvalidInputException {
    	total_No_Draft = total_No_Draft+1;
    	Game game = KingdominoApplication.getKingdomino().getCurrentGame();
    	KingDominoController.createAndSortFirstDraft(game);
    	System.out.println("createAndSortFirstDraft");
    }
    
    /**
     *@author Ellina
     *
     */
     public void revealFirstDraft() throws InvalidInputException{
   		 Game game = KingdominoApplication.getKingdomino().getCurrentGame();
    	KingDominoController.revealFirstDraft(game);
    	 for(Domino d: game.getCurrentDraft().getIdSortedDominos()) {
        	System.out.print(d.getId()+" ");
        }
    	System.out.println("revealFirstDraft");
    	for(Domino d : game.getCurrentDraft().getIdSortedDominos()) {
    		System.out.print(d.getId()+ " ");
    	}
    	System.out.println("  ");
  }


     
  
  	
    
    
    

    
    // You may need to add more actions here

    //NOTE: (Amani) new actions:
	/**
	* @author: Amani 
	* @param territory
	* @param direction
	*/
    public void placeDominoInKingdom(KingdomTerritory territory, DirectionKind direction) throws InvalidInputException{

   	   Game game = KingdominoApplication.getKingdomino().getCurrentGame();

	   Player currentPlayer = game.getNextPlayer();
	   Domino domino = currentPlayer.getDominoSelection().getDomino();
	   Kingdom playersKingdom = currentPlayer.getKingdom();
	   int x = territory.getX();
	   int y = territory.getY();
	   DominoInKingdom domInKingdom = new DominoInKingdom(x, y, playersKingdom, domino);
	   domInKingdom.setDirection(direction);
	   KingDominoController.placeDominoInKingdom(domInKingdom);
	   domino.setStatus(DominoStatus.PlacedInKingdom);
	   List<Domino> dominosInDraft = game.getCurrentDraft().getIdSortedDominos();
	   for(Domino currentDomino : dominosInDraft) {
		   if(currentDomino.equals(domino)) {
			   game.getCurrentDraft().removeIdSortedDomino(domino);
			   game.setTopDominoInPile(dominosInDraft.get(0));
		   }
	   }

    }
   
   
	
	/**
	* @author: Amani
	*/
    public void goToNextPlayer(){
       Game game = KingdominoApplication.getKingdomino().getCurrentGame();

	   Domino topDomino = game.getTopDominoInPile();
	   game.setNextPlayer(topDomino.getDominoSelection().getPlayer());
        // TODO: implement this
    }

    public void calculateAllPlayersScores(){
    	 KingDominoController.calculatePlayerScore1(game.getPlayer(0));
    	 KingDominoController.calculatePlayerScore1(game.getPlayer(1));
   		 KingDominoController.calculatePlayerScore1(game.getPlayer(2));
   		 KingDominoController.calculatePlayerScore1(game.getPlayer(3));    
    }


    public void resolveTieBreak(){
        KingDominoController.rankPlayers(game);
    }



    public void displayRanking(){
        // TODO: implement this
    }
    
    
    

	
	public void choose_Other_Placement() {		
		Game_4_Players.warningInPlacing();
	}
	
	/**
  * @author chenkua
  * @param domino
  */
    public void setPlayerOrderNextDraft(int domino){
    List<Player> tmp = game.getNextOrder();  	
     
    List<Player> newOrder = new ArrayList<Player>();
    List<String> playerColor = new ArrayList<String>();
    
    for(int i=0;i<game.getCurrentDraft().getIdSortedDominos().size();i++) {
    	
    	if(game.getCurrentDraft().getIdSortedDominos().get(i).getId()==domino) {
    		newOrder.add(game.getCurrentOrder(selectingOrder));
    	}else {
    		newOrder.add(tmp.get(i));
    	}
    }
    
    game.setNextOrder(newOrder);
    for(Player p: game.getNextOrder()){
    	System.out.print(p.getColor().toString()+" ");
    }
    System.out.println(" ");
  }
	

	
	
	/**
   * 
   * @author chenkua
   * 
   */
   public boolean preplaceDomino(){
    Player aPlayer  = game.getCurrentOrder(placingOrder);
    
    int size = aPlayer.getKingdom().getTerritories().size();
    if(size==1) {	
    	Game_4_Players.warningInPreplacing();
    	return false;
    }   
    DominoInKingdom tmp = (DominoInKingdom) aPlayer.getKingdom().getTerritories().get(size-1);
    Domino domino = tmp.getDomino();
    if (KingDominoController.verifyGridSize(tmp.getKingdom())
			&& (KingDominoController.verifyCastleAdjacency(tmp) || (KingDominoController.verifyNeighborAdjacency(tmp).size() != 0))
			&& !KingDominoController.verifyNoOverlapping(tmp)) {
		domino.setStatus(DominoStatus.CorrectlyPreplaced);
		return true;
		
	} else {
		domino.setStatus(DominoStatus.ErroneouslyPreplaced);
		Game_4_Players.warningInPlacing();
		return false;
	}
   }
  
  
  
  /**Find the DominoInKingdom which is added most recently, which also means this dominoInKingdom are being processed.
   * @author chenkua
   * 
   */
  // line 612 "../../../../../Gameplay.ump"
   public DominoInKingdom findDominoInProcessing(){
    Player aPlayer  = game.getCurrentOrder(placingOrder);
	    DominoInKingdom tmp = null;
		int size =  aPlayer.getKingdom().getTerritories().size();
		
		tmp = (DominoInKingdom) aPlayer.getKingdom().getTerritory(size-1);
		  
		return tmp;
  }
   
   /**After current players have all placed their dominos into kingdom and all have selected dominos in next draft,
   * the nextOrder becomes currentOrder
   * @author chenkua
   */
  public void upDatePlayerOrder() {
		Game_4_Players.setCurrentOrder();
	}
   
   	/* Check whether one domino should be discarded
  	 *@author chenkua 
  	 *This method is mostly copied from the similar one in controller but changed returned resutl as Boolean
  	 */
    public boolean shouldDiscardDomino(){
    DominoInKingdom tmp = findDominoInProcessing();
    int initialX = tmp.getX();
	int initialY = tmp.getY();
	DirectionKind initialDirection = tmp.getDirection();
	  		
		for (int x=-4; x<=4; x++) { // needs to be from the start of the kingdom, not from -4, -4
			for (int y=-4; y<=4; y++) {
				for (DirectionKind direction : DirectionKind.values()) {
					tmp.setX(x);
					tmp.setY(y);
					tmp.setDirection(direction);
					
					KingDominoController.verifyDominoPreplacement(tmp);
					if (tmp.getDomino().getStatus() == DominoStatus.CorrectlyPreplaced) {
						KingDominoController.verifyDominoPreplacement(tmp); 
						tmp.setX(initialX);
						tmp.setY(initialY);
						tmp.setDirection(initialDirection);						
						return false;
					}
				}
			}
		}
		
		tmp.getDomino().setStatus(DominoStatus.Discarded);
		tmp.delete();
		Game_4_Players.SuccessDiscarding();
		return true;
  }
  
  
  /*
    * @author chenkua
    */
  // line 431 "../../../../../Gameplay.ump"
   public boolean DominoSelectable(int i){
   
	   Player current = game.getCurrentOrder(selectingOrder);
	   
	   for(Player p : game.getCurrentOrder()) {
		   if(!p.equals(current) && p.getDominoSelection()!=null && p.getDominoSelection().getDomino().getId()==i) {
			  System.out.println("DominoSelectable: false");
			  Game_4_Players.warningInSelecting();
			   return false;
		   }
		   
	   }
	   System.out.println("DominoSelectable: true"); 
	   return true;
  }
  
  private static  Player getPlayerFromColor(String string) {
		Player temp = null;
		
		if(string.equals(KingdominoApplication.getKingdomino().getCurrentGame().getPlayer(0).getColor().toString().toLowerCase())) {
			
			temp = KingdominoApplication.getKingdomino().getCurrentGame().getPlayer(0);	
			
		}else if(string.equals(KingdominoApplication.getKingdomino().getCurrentGame().getPlayer(1).getColor().toString().toLowerCase())) {
			
			temp = KingdominoApplication.getKingdomino().getCurrentGame().getPlayer(1);
			
		}else if(string.equals(KingdominoApplication.getKingdomino().getCurrentGame().getPlayer(2).getColor().toString().toLowerCase())) {
			
			temp = KingdominoApplication.getKingdomino().getCurrentGame().getPlayer(2);
			
		}else if(string.equals(KingdominoApplication.getKingdomino().getCurrentGame().getPlayer(3).getColor().toString().toLowerCase())) {
			
			temp = KingdominoApplication.getKingdomino().getCurrentGame().getPlayer(3);
			
		}
		return temp;
	}
	
	public Draft chooseNextDomino(Player player, int chosenDominoID) throws InvalidInputException{
		Draft nextDraft =game.getCurrentDraft();
		for (Domino domino : nextDraft.getIdSortedDominos()) {
			if (domino.getId() == chosenDominoID) {
				Domino chosenDomino = domino;

				for (DominoSelection dominoSelection : nextDraft.getSelections()) {
					if (dominoSelection.getDomino() == chosenDomino) {
						throw new InvalidInputException("chosen domino is already occupied.");
					}
				}

				nextDraft.addSelection(player, chosenDomino);
				return nextDraft;
			}
		}
		throw new InvalidInputException("chosen domino was not in next draft.");
	}
	/**This method will create DominoInKingdom to the current player who are placing the domino.
    * @author chenkua
    * @param x
    * @param y
    * @param dir
    */
  // line 673 "../../../../../Gameplay.ump"
   public void createDominoInKingdom(int x, int y, String dir){
    Player curplayer = game.getCurrentOrder(placingOrder);
		Kingdom k = curplayer.getKingdom();
		Domino d = null;
		//check for dupilcate adding domino to kingdom
		if(curplayer.getDominoSelection()!=null) {
			 d = curplayer.getDominoSelection().getDomino();
		}else {
			System.out.println("Domino is already in your kingdom");
			return;
		}
		DominoInKingdom dk = new DominoInKingdom(x, y, k, d);
		DirectionKind direction = util.directionKindFromString(dir); 
		
		dk.setDirection(direction);
		KingDominoController.verifyDominoPreplacement(dk);
		
		//this delete() is very important! @Kua
		curplayer.getDominoSelection().delete();
		System.out.println(d.getId()+" is added the kingdom of "+ curplayer.getColor().toString());
  }
	
   /**@author chenkua
    * 
    */
   public void moveDominoInKingdom(DirectionKind move) {
	   
	   int size = game.getCurrentOrder(placingOrder).getKingdom().getTerritories().size();
	  	
	   if(size>1) {
	   		
		   DominoInKingdom DIK = (DominoInKingdom) game.getCurrentOrder(placingOrder).getKingdom().getTerritory(size-1);
		  
		   try {
			moveDominoInKingdom(DIK, move);
			System.out.println(DIK.getX()+" " +DIK.getY());
		   } catch (InvalidInputException e) {
			Game_4_Players.warningInMoving();
			e.printStackTrace();
		}
	   }else {
		   System.out.println("No DominoInKingdom");
	   }
	   
   }

   /* moveDominoInKingdom has some small problem here, but should not directly change what is in controller otherwies
    * Iteration2 may get affected.
    */
   /**
    * @author Elias; chenkua
    * @param dik
    * @param move
    * @throws InvalidInputException
    */
   public void moveDominoInKingdom(DominoInKingdom dik, DirectionKind move) throws InvalidInputException {
	   int x = dik.getX();
		int y = dik.getY();
		int initX = x;
		int initY =y;
		DominoStatus s = dik.getDomino().getStatus();

		if (move == DirectionKind.Up) {
			y += 1;
		} else if (move == DirectionKind.Down) {
			y -= 1;
		} else if (move == DirectionKind.Left) {
			x -= 1;
		} else if (move == DirectionKind.Right) {
			x += 1;
		}
		
		/*When setX and setY, it will return fasle when x and y is out of bonudary and will not really set the new X and new Y
		 *
		 */
		if(dik.setX(x) &&dik.setY(y)) {	
			if(!KingDominoController.verifyKingdomTerritoryInBoard(dik)) {
				dik.setX(initX);
				dik.setY(initY);
				dik.getDomino().setStatus(s);
				throw new InvalidInputException("movement would place one of the domino tiles outside the board.");
			}
		}else {
			throw new InvalidInputException("movement would place one of the domino tiles outside the board.");
		}
	}
	
   /**This method will set domino status if verified successfully
    * @author chenkua
    */
   public void verifyPlacement() {
	   int size = game.getCurrentOrder(placingOrder).getKingdom().getTerritories().size();
	   DominoInKingdom tmp = (DominoInKingdom) game.getCurrentOrder(placingOrder).getKingdom().getTerritory(size-1);   
	   try {
		KingDominoController.placeDominoInKingdom(tmp);
	} catch (InvalidInputException e) {
		System.out.print(e);
	}	   
   }
   
   /**
    * @author chenkua Elias
    * @param dir
    */
  public  void rotate(String dir) {
	  int size = game.getCurrentOrder(placingOrder).getKingdom().getTerritories().size();
	   DominoInKingdom tmp = (DominoInKingdom) game.getCurrentOrder(placingOrder).getKingdom().getTerritory(size-1);    
	  	try {
			KingDominoController.rotateDominoInKingdom(tmp, dir);
		} catch (InvalidInputException e) {
			shouldNotRotate();
			e.printStackTrace();
		}
	  
  }	

 	/**
    * @author chenkua
    */
   public void shouldNotRotate() {
	   Game_4_Players.shouldNorRotate();
   }

	public void WarningInDiscarding() {
	  Game_4_Players.warningInDiscarding();
  }
  
  /**
   *@author chenkua
   */
   public boolean moveable() {
	   Player aPlayre = game.getCurrentOrder(placingOrder);
	   DominoInKingdom DIK= findDominoInProcessing();
	 
	   if(DIK.getDomino().getStatus()==DominoStatus.PlacedInKingdom) {
		  Game_4_Players.warningAfterMoving();
		  return false; 
	   }
	   
	   return true;
	   
	   
	   
   }
   
}
